/*
 *   Copyright 2022 rocksdb developers
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

buildscript {
    repositories {
        maven {
            name = "Gradle"
            url = "https://plugins.gradle.org/m2/"
        }
        maven {
            name = "Minecraft Forge"
            url = "https://maven.minecraftforge.net/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.0"
        classpath "net.minecraftforge.gradle:ForgeGradle:5.1.+"
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "net.minecraftforge.gradle"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "maven-publish"

    version = "$rocksdbVersion-$minecraftVersion"
    group = "net.daporkchop"
    archivesBaseName = "ForgeRocks"

    compileJava.sourceCompatibility = compileJava.targetCompatibility = "$javaVersion"

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    configurations {
        shade
        api.extendsFrom shade
        implementation.extendsFrom shade
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        minecraft "net.minecraftforge:forge:${minecraftVersion}-${minecraftforgeVersion}"

        shade "org.rocksdb:rocksdbjni:${rocksdbVersion}"
    }

    minecraft {
        mappings "${mappingsChannel}", "${mappingsVersion}"
    }

    processResources {
        duplicatesStrategy DuplicatesStrategy.INCLUDE

        // this will ensure that this task is redone when the versions change.
        inputs.property "version", "${rocksdbVersion}-${minecraftVersion}"
        inputs.property "mcversion", "${minecraftVersion}"

        // replace stuff in mcmod.info, nothing else
        from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'
            include 'META-INF/mods.toml'

            // replace version and mcversion
            expand 'version': "${rocksdbVersion}-${minecraftVersion}", 'mcversion': "${minecraftVersion}"
        }

        // copy everything else except the mcmod.info
        from(sourceSets.main.resources.srcDirs) {
            exclude 'mcmod.info'
            exclude 'META-INF/mods.toml'
        }
    }

    shadowJar {
        archiveClassifier = "full"
        configurations = [project.configurations.shade]

        exclude 'module-info.class'
    }

    reobf { //reobfuscate the shaded JAR
        shadowJar {}
    }

    shadowJar.finalizedBy reobfShadowJar
    build.dependsOn shadowJar

    publishing {
        repositories {
            if (project.hasProperty("daporkchopMavenUsername") && project.hasProperty("daporkchopMavenPassword")) {
                maven {
                    credentials {
                        username = "$daporkchopMavenUsername"
                        password = "$daporkchopMavenPassword"
                    }

                    name = "DaPorkchop_"
                    url = version.endsWith("SNAPSHOT") ? "https://maven.daporkchop.net/snapshot/" : "https://maven.daporkchop.net/release/"
                }
            }
        }

        publications {
            maven(MavenPublication) {
                groupId = "net.daporkchop"
                artifactId = "forgerocks"
                version = project.version

                from components.java

                artifacts = [jar]

                //hacky thing to remove forge dependency from pom
                pom.withXml {
                    asNode().getAt("dependencies").getAt("dependency").each { dep ->
                        if ("net.minecraftforge".equals(dep.getAt("groupId").get(0).value().get(0))) {
                            dep.parent().remove(dep)
                        }
                    }
                }
            }
        }
    }

    generateMetadataFileForMavenPublication.enabled = false
}
